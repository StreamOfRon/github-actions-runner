name: GitHub Actions Runner in Docker - Base
on:
  push:
    paths:
      - Dockerfile.base
      - .github/workflows/base.yml
    branches:
      - master
      - develop
  workflow_dispatch:
  #schedule:
  #  - cron:  '0 22 * * *'

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}

jobs:
  ubuntu_base_deploy:
    runs-on: cloudswarm
    strategy:
      matrix:
        release: [jammy]
      fail-fast: false
    steps:
      - name: Copy Repo Files
        uses: actions/checkout@master
      - name: Get GitHub organization or user
        run: echo 'ORG='$(echo $(dirname ${GITHUB_REPOSITORY}) | awk '{print tolower($0)}') >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/streamofron/github-runner-base
          tags: |
            type=raw,value=ubuntu-latest,enable=${{ contains(matrix.release, 'jammy') }}
            type=raw,value=ubuntu-${{ matrix.release }},enable=true
            type=sha,prefix=,enable=true
      - name: Copy Dockerfile
        run: cp Dockerfile.base Dockerfile.base.ubuntu-${{ matrix.release }}; sed -i.bak 's/FROM.*/FROM ubuntu:${{ matrix.release }}/' Dockerfile.base.ubuntu-${{ matrix.release }}
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: github-runner-base
          archs: amd64
          oci: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          containerfiles: |
            Dockerfile.base.ubuntu-${{ matrix.release }}
      - name: Push Image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

  debian_base_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: [bookworm]
      fail-fast: false
    steps:
      - name: Copy Repo Files
        uses: actions/checkout@master
      - name: Get GitHub organization or user
        run: echo 'ORG='$(echo $(dirname ${GITHUB_REPOSITORY}) | awk '{print tolower($0)}') >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/streamofron/github-runner-base
          tags: |
            type=raw,value=debian-latest,enable=${{ contains(matrix.release, 'bookworm') }}
            type=raw,value=debian-${{ matrix.release }},enable={{is_default_branch}}
            type=sha,prefix=,enable=true
      - name: Copy Dockerfile
        run: cp Dockerfile.base Dockerfile.base.debian-${{ matrix.release }}; sed -i.bak 's/FROM.*/FROM debian:${{ matrix.release }}/' Dockerfile.base.debian-${{ matrix.release }}
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: github-runner-base
          archs: amd64
          oci: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          containerfiles: |
            Dockerfile.base.debian-${{ matrix.release }}
      - name: Push Image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust
